#!/usr/bin/env bash

set -e
set -o pipefail

FLY_TARGET_NAME=${1:-ci}
echo "Pipeline: $FLY_TARGET_NAME"

check_installed() {
  if ! command -v $1 > /dev/null 2>&1; then
    printf "$1 must be installed before running this script!"
    exit 1
  fi
}

configure_pipeline() {
  local name=$1
  local pipeline=$2

  printf "configuring the $name pipeline...\n"

  fly -t $FLY_TARGET_NAME set-pipeline \
    -p $name \
    -c $pipeline \
    -l <(lpass show "Concourse Credentials" --notes)
}

# configure_infrastructure_pipeline sets a pipeline for deploying an integration CF environment. The first three parameters, which are required, are the environment's name, the name of its env-specific Lastpass note, and the name of the environment pool it belongs to. The optional fourth parameter is the pipeline configuration to use, which defaults to the base infrastruction pipeline configuration.
configure_infrastructure_pipeline() {
  local name=$1
  local creds=$2
  local potato=$3
  local pipeline=$4
  local cf_deployment_version=$5

  if [[ -z $pipeline ]]; then
    pipeline=$pipelines_path/infrastructure/pipeline.yml
  fi

  if [[ -z $cf_deployment_version ]]; then
    cf_deployment_version="v*"
  fi

  printf "configuring the $name pipeline...\n"

  fly -t $FLY_TARGET_NAME set-pipeline \
    -p $name \
    -c $pipeline \
    -l <(lpass show "Concourse Credentials" --notes) \
    -l <(lpass show "$creds" --notes) \
    -v pool-name=$potato \
    -v cf-deployment-version=$cf_deployment_version
}

configure_bosh_lite_pool_pipeline() {
  local name=$1

  printf "configuring the $name pipeline...\n"

  fly -t $FLY_TARGET_NAME set-pipeline \
    -p $name \
    -c $pipelines_path/cli-dev-bosh-lite/pipeline.yml \
    -v bosh-lite-dns-zone-name=bosh-lite-pool \
    -v bosh-lite-gcp-json-key="$(lpass show Shared-CLI/bosh-service-account-gcp-creds --notes | jq -c . )" \
    -v bosh-lite-pools-github-private-key="$(lpass show Shared-CLI/bosh-lite-pool-github-key --notes)" \
    -v bosh-lite-project-id=cf-cli \
    -v bosh-lite-region=us-west1 \
    -v bosh-lite-storage-bucket=bosh-lites \
    -v bosh-lite-system-domain-suffix=lite.cli.fun \
    -v git-email=cf-cli-eng@pivotal.io \
    -v git-username=cf-cli-eng \
    -v env-pool-repo=git@github.com:cloudfoundry/cli-pools.git \
    -v slack-webhook-url="$(lpass show Shared-CLI/Concourse/Concourse\ Credentials --notes | grep -F slack-webhook-url: | cut -d '"' -f2)"
}

configure_workstation_scheduler_pipeline() {
  local name=$1
  local pipeline=$2

  printf "configuring the $name pipeline...\n"

  fly -t $FLY_TARGET_NAME set-pipeline \
    -p $name \
    -c $pipeline \
    -l <(lpass show "Concourse Credentials" --notes) \
    -l <(lpass show "VAT Concourse Credentials" --notes) \
    -v workstation-scheduler-gcp-json-key="$(lpass show Shared-CLI/workstation-scheduler-gcp-service-account-key --notes | jq -c . )"
}

check_installed lpass
check_installed fly

# Make sure we're up to date and that we're logged in.
lpass sync

pipelines_path=$(cd $(dirname $0)/.. && pwd)

configure_pipeline v6 $pipelines_path/cli-v6/pipeline.yml
configure_pipeline oslo-scan-status $pipelines_path/oslo-scan-status/pipeline.yml
configure_pipeline concourse $pipelines_path/concourse/pipeline.yml
configure_pipeline docker-images $pipelines_path/docker-images/pipeline.yml
configure_workstation_scheduler_pipeline cli-workstation-scheduler $pipelines_path/workstation-scheduler/cli-pipeline.yml

configure_infrastructure_pipeline inf-beque beque-pipeline baked-potato
configure_infrastructure_pipeline inf-burmaclub burmaclub-pipeline baked-potato
configure_infrastructure_pipeline inf-hardknox hardknox-pipeline baked-potato
configure_infrastructure_pipeline inf-kinkhao kinkhao-pipeline baked-potato "$pipelines_path/infrastructure/pipeline.yml" "v13.23.0"
configure_infrastructure_pipeline inf-lovingcup lovingcup-pipeline baked-potato
configure_infrastructure_pipeline inf-starbelly starbelly-pipeline baked-potato "$pipelines_path/infrastructure/pipeline.yml" "v13.23.0"
configure_infrastructure_pipeline inf-tartine tartine-pipeline baked-potato
configure_infrastructure_pipeline inf-tropisueno tropisueno-pipeline baked-potato

# Arsicault has additional configuration to alert the PM before it rolls.
arsicault_pipeline="bosh int $pipelines_path/infrastructure/pipeline.yml -o $pipelines_path/infrastructure/add-pm-alert-and-wait.yml"
configure_infrastructure_pipeline inf-arsicault arsicault-pipeline deep-fried-potato <(eval $arsicault_pipeline)

legacy_pipeline=$pipelines_path/infrastructure/legacy-pipeline.yml
configure_infrastructure_pipeline inf-aster aster-pipeline kloesse $legacy_pipeline
configure_infrastructure_pipeline inf-solstice solstice-pipeline kloesse $legacy_pipeline

configure_bosh_lite_pool_pipeline bosh-lites
