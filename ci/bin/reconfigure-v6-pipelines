#!/usr/bin/env bash

set -e
set -o pipefail

FLY_TARGET_NAME=${1:-ci}
echo "Pipeline: $FLY_TARGET_NAME"

configure_pipeline() {
  local name=$1
  local pipeline=$2

  printf "configuring the $name pipeline...\n"

  fly -t $FLY_TARGET_NAME set-pipeline \
    -p $name \
    -c $pipeline \
    -l <(lpass show "Concourse Credentials" --notes)
}

# configure_infrastructure_pipeline sets a pipeline for deploying an integration CF environment. The first three parameters, which are required, are the environment's name, the name of its env-specific Lastpass note, and the name of the environment pool it belongs to. The optional fourth parameter is the pipeline configuration to use, which defaults to the base infrastruction pipeline configuration.
configure_infrastructure_pipeline() {
  local name=$1
  local creds=$2
  local potato=$3
  local pipeline=$4
  local cf_deployment_version=$5

  if [[ -z $pipeline ]]; then
    pipeline=$pipelines_path/infrastructure/pipeline.yml
  fi

  if [[ -z $cf_deployment_version ]]; then
    cf_deployment_version="v*"
  fi

  printf "configuring the $name pipeline...\n"

  fly -t $FLY_TARGET_NAME set-pipeline \
    -p $name \
    -c $pipeline \
    -l <(lpass show "Concourse Credentials" --notes) \
    -l <(lpass show "$creds" --notes) \
    -v pool-name=$potato \
    -v cf-deployment-version=$cf_deployment_version
}

configure_workstation_scheduler_pipeline() {
  local name=$1
  local pipeline=$2

  printf "configuring the $name pipeline...\n"

  fly -t $FLY_TARGET_NAME set-pipeline \
    -p $name \
    -c $pipeline \
    -l <(lpass show "Concourse Credentials" --notes) \
    -l <(lpass show "VAT Concourse Credentials" --notes) \
    -v workstation-scheduler-gcp-json-key="$(lpass show Shared-CLI/workstation-scheduler-gcp-service-account-key --notes | jq -c . )"
}

./reconfigure-pipeline-prerequisites

# Make sure we're up to date and that we're logged in.
lpass sync

pipelines_path=$(cd $(dirname $0)/.. && pwd)

configure_pipeline v6 $pipelines_path/cli-v6/pipeline.yml
configure_pipeline oslo-scan-status $pipelines_path/oslo-scan-status/pipeline.yml
configure_pipeline concourse $pipelines_path/concourse/pipeline.yml
configure_pipeline docker-images $pipelines_path/docker-images/pipeline.yml
configure_workstation_scheduler_pipeline cli-workstation-scheduler $pipelines_path/workstation-scheduler/cli-pipeline.yml

higest_compatible_cfd_version="v13.23.0"
configure_infrastructure_pipeline inf-starbelly starbelly-pipeline baked-potato $pipelines_path/infrastructure/pipeline.yml $higest_compatible_cfd_version
configure_infrastructure_pipeline inf-tartine tartine-pipeline baked-potato $pipelines_path/infrastructure/pipeline.yml $higest_compatible_cfd_version
configure_infrastructure_pipeline inf-tropisueno tropisueno-pipeline baked-potato $pipelines_path/infrastructure/pipeline.yml $higest_compatible_cfd_version