resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: cron-resource
  type: docker-image
  source:
    repository: cftoolsmiths/cron-test

resources:
  - name: terraform
    type: terraform
    source:
      backend_type: gcs
      backend_config:
        bucket: ((bosh-lite-storage-bucket))
        prefix: terraform_state_files/
        credentials: ((bosh-lite-gcp-json-key))
  - name: cli-ci
    type: git
    source:
      branch: master
      uri: https://github.com/cloudfoundry/cli-ci
  - name: capi-ci
    type: git
    source:
      branch: main
      uri: git@github.com:cloudfoundry/capi-ci.git
      private_key: ((bosh-lite-pools-github-private-key))
  - name: bosh-deployment
    type: git
    source:
      branch: master
      uri: git@github.com:cloudfoundry/bosh-deployment.git
      private_key: ((bosh-lite-pools-github-private-key))
  - name: ready-pool
    type: pool
    source:
      branch: master
      uri: ((env-pool-repo))
      pool: bosh-lites
      private_key: ((bosh-lite-pools-github-private-key))
  - name: deleting-pool
    type: pool
    source:
      branch: master
      uri: ((env-pool-repo))
      pool: bosh-lites-to-be-deleted
      private_key: ((bosh-lite-pools-github-private-key))
  - name: building-pool
    type: pool
    source:
      branch: master
      uri: ((env-pool-repo))
      pool: building-bosh-lites
      private_key: ((bosh-lite-pools-github-private-key))
  - name: pool-repo
    type: git
    source:
      branch: master
      uri: ((env-pool-repo))
      private_key: ((bosh-lite-pools-github-private-key))
  - name: create-bosh-lite-trigger
    type: git
    source:
      branch: master
      uri: ((env-pool-repo))
      private_key: ((bosh-lite-pools-github-private-key))
      paths:
        - .trigger-bosh-lites-create # updated by check-pool-size
  - name: destroy-bosh-lite-trigger
    type: git
    source:
      branch: master
      uri: ((env-pool-repo))
      private_key: ((bosh-lite-pools-github-private-key))
      paths:
        - .trigger-bosh-lites-destroy # updated by unclaim_bosh_lite alias
  - name: cf-deployment
    type: git
    source:
      uri: git@github.com:cloudfoundry/cf-deployment.git
      private_key: ((bosh-lite-pools-github-private-key))
      tag_filter: v*
  - name: cf-deploy
    type: bosh-deployment
    source:
      skip_check: true
  - name: five-minutes
    type: time
    source:
      interval: 5m
  - name: slack-alert
    type: slack-notification
    source:
      url: ((slack-webhook-url))

jobs:
  - name: create-bosh-lite
    plan:
      - in_parallel:
        - get: capi-ci
        - get: bosh-deployment
        - get: cf-deployment
        - get: create-bosh-lite-trigger
          trigger: true
        - get: cli-ci
      - task: generate-fake-env-for-building-pool
        file: capi-ci/ci/bosh-lite/generate-fake-env-for-building-pool.yml
      - put: building-pool
        params:
          add_claimed: fake-placeholder-env/
      - put: terraform
        params:
          generate_random_name: true
          delete_on_failure: true
          terraform_source: capi-ci/terraform/bosh-lite/
          vars:
            project_id: ((bosh-lite-project-id))
            json_key: ((bosh-lite-gcp-json-key))
            dns_project_id: ((bosh-lite-project-id))
            dns_json_key: ((bosh-lite-gcp-json-key))
            system_domain_suffix: ((bosh-lite-system-domain-suffix))
            dns_zone_name: ((bosh-lite-dns-zone-name))
      - do:
          - task: create-bosh-lite
            file: cli-ci/ci/cli-dev-bosh-lite/tasks/create-bosh-lite.yml
            params:
              GCP_JSON_KEY: ((bosh-lite-gcp-json-key))
              GCP_INSTANCE_TYPE: n2-highmem-8
          - do:
              - task: create-env-vars-file
                file: capi-ci/ci/bosh-lite/create-env-vars-file.yml
              - task: upload-cf-assets
                file: capi-ci/ci/bosh-lite/upload-cf-assets.yml
              - task: write-bosh-target-file
                file: capi-ci/ci/bosh-lite/write-bosh-target-file.yml
              - put: cf-deploy
                params:
                  source_file: bosh-target/target.yml
                  manifest: cf-deployment/cf-deployment.yml
                  vars_files:
                  - bosh-target/vars.yml
                  ops_files:
                  - capi-ci/cf-deployment-operations/skip-cert-verify.yml
                  - capi-ci/cf-deployment-operations/use-latest-stemcell.yml
                  - cf-deployment/operations/bosh-lite.yml
                  - cf-deployment/operations/use-compiled-releases.yml
                  - cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell.yml
                  - cf-deployment/operations/test/add-persistent-isolation-segment-diego-cell-bosh-lite.yml
                  - cf-deployment/operations/use-internal-lookup-for-route-services.yml
                  - capi-ci/cf-deployment-operations/seed-credhub-asg.yml
                  - cli-ci/ci/infrastructure/operations/default-app-memory.yml
                  - cli-ci/ci/infrastructure/operations/add-oidc-provider.yml
                  - cli-ci/ci/infrastructure/operations/add-uaa-client-cf-custom.yml
                  - cli-ci/ci/infrastructure/operations/give-cf-admin-clients-read-scope.yml
              - task: upload-to-gcs
                file: capi-ci/ci/gcs/upload-to-gcs.yml
                input_mapping:
                  environment: terraform
                  source-directory: director-state
                params:
                  GCP_JSON_KEY: ((bosh-lite-gcp-json-key))
                  GCP_BUCKET: ((bosh-lite-storage-bucket))
                  GCP_PATH: director-state
                  USE_ENV_NAMED_SUBDIR: true
              - put: ready-pool
                params:
                  add: bosh-lite-env-info/
              - put: building-pool
                params:
                  remove: fake-placeholder-env/
            on_failure:
              in_parallel:
                - task: delete-bosh-lite
                  file: cli-ci/ci/cli-dev-bosh-lite/tasks/delete-bosh-lite.yml
        on_failure:
          do:
            - in_parallel:
                - put: terraform
                  params:
                    action: destroy
                    env_name_file: terraform/name
                    terraform_source: capi-ci/terraform/bosh-lite/
                    vars:
                      project_id: ((bosh-lite-project-id))
                      json_key: ((bosh-lite-gcp-json-key))
                      dns_project_id: ((bosh-lite-project-id))
                      dns_json_key: ((bosh-lite-gcp-json-key))
                      system_domain_suffix: ((bosh-lite-system-domain-suffix))
                      dns_zone_name: ((bosh-lite-dns-zone-name))
                  get_params:
                    action: destroy
                - put: slack-alert
                  params:
                    channel: '#cli-eng'
                    text: |
                      Creating a bosh-lite failed :(
                      ```
                      Do the following tasks:
                      1.Make sure the bosh-lite is deleted and resources are cleaned up.
                      2.Remove the corresponding sha file from building-bosh-lites pool.
                      3.Retrigger the create-bosh-lite task in the pipeline.
                      Link: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
                      https://bit.ly/2S5aIov
                      ```
            - put: building-pool
              params:
                remove: fake-placeholder-env/

  - name: delete-bosh-lite
    plan:
      - in_parallel:
        - get: destroy-bosh-lite-trigger
          version: every
          trigger: true
        - get: cli-ci
        - get: capi-ci
        - get: bosh-deployment
        - put: deleting-pool
          params:
            acquire: true
      - do:
        - task: download-from-gcs
          file: capi-ci/ci/gcs/download-from-gcs.yml
          input_mapping:
            environment: deleting-pool
          output_mapping:
            destination-directory: director-state
          params:
            GCP_JSON_KEY: ((bosh-lite-gcp-json-key))
            GCP_BUCKET: ((bosh-lite-storage-bucket))
            GCP_PATH: director-state
            USE_ENV_NAMED_SUBDIR: true
        - task: delete-bosh-lite
          file: cli-ci/ci/cli-dev-bosh-lite/tasks/delete-bosh-lite.yml
        - put: terraform
          params:
            action: destroy
            env_name_file: deleting-pool/name
            terraform_source: capi-ci/terraform/bosh-lite/
            vars:
              project_id: ((bosh-lite-project-id))
              json_key: ((bosh-lite-gcp-json-key))
              dns_project_id: ((bosh-lite-project-id))
              dns_json_key: ((bosh-lite-gcp-json-key))
              system_domain_suffix: ((bosh-lite-system-domain-suffix))
              dns_zone_name: ((bosh-lite-dns-zone-name))
          get_params:
            action: destroy
        - task: delete-from-gcs
          file: capi-ci/ci/gcs/delete-from-gcs.yml
          input_mapping:
            environment: deleting-pool
          params:
            GCP_JSON_KEY: ((bosh-lite-gcp-json-key))
            GCP_BUCKET: ((bosh-lite-storage-bucket))
            GCP_PATH: director-state
            USE_ENV_NAMED_SUBDIR: true
        - put: deleting-pool
          params:
            remove: deleting-pool/

  - name: check-pool-size
    build_logs_to_retain: 100
    plan:
      - in_parallel:
        - get: capi-ci
        - get: cli-ci
        - get: pool-repo
        - get: five-minutes
          trigger: true
      - task: check-pool-size
        file: capi-ci/ci/bosh-lite/check-pool-size.yml
        input_mapping:
          env-pool: pool-repo
        params:
          MIN_UNCLAIMED_COUNT: 3
          GIT_USERNAME: ((git-username))
          GIT_EMAIL: ((git-email))
      - put: pool-repo
        params:
          repository: updated-env-pool
          rebase: true
